{"ast":null,"code":"//import axios from \"axios\";\nvar fakeData = [{\n  id: \"1\",\n  description: \"Engineer\"\n}, {\n  id: \"2\",\n  description: \"Singer\"\n}, {\n  id: \"3\",\n  description: \"Seller\"\n}];\nexport function getTypeOfProfessionals() {\n  return new Promise(async function (resolve, reject) {\n    setTimeout(() => {\n      resolve(fakeData);\n    }, 1000);\n  });\n}\nexport function getTypeOfProfessional(id) {\n  return new Promise(async function (resolve, reject) {\n    setTimeout(() => {\n      let pro = fakeData.find(p => p.id === id);\n\n      if (!pro) {\n        reject();\n      }\n\n      resolve(pro);\n    }, 1000);\n  });\n}\nexport function editTypeOfProfessional(id, data) {\n  return new Promise(async function (resolve, reject) {\n    setTimeout(() => {\n      let find = false;\n      fakeData = fakeData.map(p => {\n        if (id === p.id) {\n          data.id = id;\n          find = true;\n          return data;\n        }\n\n        return p;\n      });\n\n      if (!find) {\n        reject();\n      }\n\n      resolve(data);\n    }, 1000);\n  });\n}\nexport function createTypeOfProfessional(data) {\n  return new Promise(async function (resolve, reject) {\n    setTimeout(() => {\n      data.id = \"now\" + Math.random();\n      fakeData.push(data);\n      resolve(data);\n    }, 1000);\n  });\n}\nexport function deleteTypeOfProfessional(id) {\n  return new Promise(async function (resolve, reject) {\n    setTimeout(() => {\n      let find = false;\n      fakeData = fakeData.filter(p => {\n        if (id === p.id) {\n          find = true;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (!find) {\n        reject();\n      }\n\n      resolve(id);\n    }, 1000);\n  });\n}","map":{"version":3,"sources":["/home/lucas/lucas/gopress/src/services/typeOfProfessionals.ts"],"names":["fakeData","id","description","getTypeOfProfessionals","Promise","resolve","reject","setTimeout","getTypeOfProfessional","pro","find","p","editTypeOfProfessional","data","map","createTypeOfProfessional","Math","random","push","deleteTypeOfProfessional","filter"],"mappings":"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","sourcesContent":["//import axios from \"axios\";\nimport { ITypeOfProfessional } from \"../alias/ITypeOfProfessional\";\n\nvar fakeData: ITypeOfProfessional[] = [\n  {\n    id: \"1\",\n    description: \"Engineer\",\n  },\n  {\n    id: \"2\",\n    description: \"Singer\",\n  },\n  {\n    id: \"3\",\n    description: \"Seller\",\n  },\n];\n\nexport function getTypeOfProfessionals(): Promise<ITypeOfProfessional[]> {\n  return new Promise(async function (resolve, reject) {\n    setTimeout(() => {\n      resolve(fakeData);\n    }, 1000);\n  });\n}\n\nexport function getTypeOfProfessional(\n  id: string\n): Promise<ITypeOfProfessional | undefined> {\n  return new Promise(async function (resolve, reject) {\n    setTimeout(() => {\n      let pro = fakeData.find((p) => p.id === id);\n\n      if (!pro) {\n        reject();\n      }\n\n      resolve(pro);\n    }, 1000);\n  });\n}\n\nexport function editTypeOfProfessional(\n  id: string,\n  data: ITypeOfProfessional\n): Promise<ITypeOfProfessional> {\n  return new Promise(async function (resolve, reject) {\n    setTimeout(() => {\n      let find = false;\n      fakeData = fakeData.map((p) => {\n        if (id === p.id) {\n          data.id = id;\n          find = true;\n          return data;\n        }\n        return p;\n      });\n\n      if (!find) {\n        reject();\n      }\n\n      resolve(data);\n    }, 1000);\n  });\n}\n\nexport function createTypeOfProfessional(\n  data: ITypeOfProfessional\n): Promise<ITypeOfProfessional> {\n  return new Promise(async function (resolve, reject) {\n    setTimeout(() => {\n      data.id = \"now\" + Math.random();\n      fakeData.push(data);\n      resolve(data);\n    }, 1000);\n  });\n}\n\nexport function deleteTypeOfProfessional(id: string): Promise<string> {\n  return new Promise(async function (resolve, reject) {\n    setTimeout(() => {\n      let find = false;\n      fakeData = fakeData.filter((p) => {\n        if (id === p.id) {\n          find = true;\n          return false;\n        }\n        return true;\n      });\n\n      if (!find) {\n        reject();\n      }\n\n      resolve(id);\n    }, 1000);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}